configuration:
  dependencies:
  - "mvn://org.python:jython-standalone:2.7.4"
  - "mvn://org.codehaus.groovy:groovy-all:pom:2.5.23"
  runtime: "concord-v2"

forms:
  selectForeman:
  - selectedSystem:
      label: "Select Secret Group"
      type: "string"
      allow: ["foreman-test", "foreman-cftest", "puppet-test", "puppet-prod"]

flows:
  default:
  - form: selectForeman
  - set:
      selectedSystem : ${selectForeman.selectedSystem}
  - script: groovy
    body: |
      def foremanData = [
        "foreman-test": ["url": "https://192.168.56.10", "token": "nPJHK6C_TCLQOuUkp9kIAA"]
      ]

      def puppetData = [
        "puppet-test": ["url": "https://pe-console-test.wal-mart.com/", "token": "0SrfiAZ-IQr-OaYwdzFPQ3am3gNW6BGCXiVtambvtCuM", "apiUrl": "https://puppet-enterprice.local:4433"]
      ]

      def selected = execution.variables().get("selectedSystem")

      if (foremanData.containsKey(selected)) {
        def item = foremanData[selected]
        result.set("systemType", "Foreman")
        result.set("selectedUrl", item["url"])
        result.set("selectedToken", item["token"])
        result.set("apiUrl", "NONE")

      } else if (puppetData.containsKey(selected)) {
        def item = puppetData[selected]
        result.set("systemType", "Puppet")
        result.set("selectedUrl", item["url"])
        result.set("selectedToken", item["token"])
        result.set("apiUrl", item["apiUrl"])
      } else {
        throw new RuntimeException("Unknown system selected: " + selected)
      }
    out:
      systemType: "${result.systemType}"
      selectedUrl: "${result.selectedUrl}"
      selectedToken: "${result.selectedToken}"
      apiUrl: "${result.apiUrl}"

  - log: "Selected URL: ${ selectedUrl} ${selectedToken} ${apiUrl} ${systemType}"

  - if: ${systemType == "Foreman"}
    then:
      - call: foreman
        in:
          url: "${selectedUrl}"
          token: "${selectedToken}"

  - if: ${systemType == "Puppet"}
    then: 
      - call: puppet
        in:
          url: "${apiUrl}"
          token: "${selectedToken}"
          apiUrl: "${apiUrl}"

  puppet:
  - set:
      groupName: "ConfigurationManagement"
  - task: http
    in:
     method: GET
     url: ${url}/rbac-api/v1/groups
     headers:
       X-Authentication: ${token}
     response: "json"
     ignoreSslErrors: true
    out: rsp
     
  - log: "statusCode: ${rsp.content}"

  - script: python
    body: |
      import json
      response_data = rsp['content']
      group_id = None
      for group in response_data:
          if group.get('display_name') == groupName:
              group_id = group.get('id')
              break
      if group_id is None:
          print("Group '{}' not found".format(groupName))
          result.set('groupId', "")  # Set empty string instead of None
          result.set('foundGroup', False)
      else:
          print("Found group '{}' with ID: {}".format(groupName, group_id))
          result.set('groupId', str(group_id))  # Convert to string
          result.set('foundGroup', True)
    out:
      groupId: "${result.groupId}"
      foundGroup: "${result.foundGroup}"


  - if: ${foundGroup}
    then:
      - log: "Group ID found: ${groupId}"
      - task: http
        in:
         method: DELETE
         url: ${url}/rbac-api/v1/groups/${groupId}
         headers:
           X-Authentication: ${token} 
         ignoreSslErrors: true
        out: deleteRsp
      - log: "Delete response: ${deleteRsp.statusCode}"
    else:
      - log: "Cannot delete group - group not found"

  foreman:
  - set:
      groupName: "ConfigurationManagement"
      NewgroupName: "Puppet-Config-Administrators"
      adminUser: "vn58g5r"
      adminPassword: "${token}"

  - task: http
    in:
     method: GET
     auth:
      basic:
        username: "${adminUser}"
        password: "${adminPassword}"
     url: ${url}/api/usergroups
     response: "json"
     ignoreSslErrors: true
    out: rsp
     
  - script: python
    body: |
      import json
      response_data = rsp['content']
      group_id = None
      for group in response_data.get('results', []):
          if group.get('name') == groupName:
              group_id = group.get('id')
              break
      if group_id is None:
          print("Group '{}' not found".format(groupName))
          result.set('groupId', "")  # Set empty string instead of None
          result.set('foundGroup', False)
      else:
          print("Found group '{}' with ID: {}".format(groupName, group_id))
          result.set('groupId', str(group_id))  # Convert to string
          result.set('foundGroup', True)
    out:
      groupId: "${result.groupId}"
      foundGroup: "${result.foundGroup}"


  - if: ${foundGroup}
    then:
      - log: "Group ID found: ${groupId}"
      # Step 3: Get users in the original group
      - task: http
        in:
          url: "${url}/api/usergroups"
          method: "POST"
          request: json
          response: json
          headers:
            Content-Type: "application/json"
          auth:
            basic:
              username: "${adminUser}"
              password: "${adminPassword}"
          body:
            usergroup:
              name: "${NewgroupName}"
              admin: true
          ignoreErrors: false
          connectTimeout: 30000
          readTimeout: 60000
          verifySsl: false
        out: createUsergroupResponse
      
      - log: "Usergroup created successfully: ${createUsergroupResponse.content.id}"
      
      # Create external usergroup mapping
      - task: http
        in:
          url: "${url}/api/usergroups/${createUsergroupResponse.content.id}/external_usergroups"
          method: "POST"
          request: json
          response: json
          headers:
            Content-Type: "application/json"
          auth:
            basic:
              username: "${adminUser}"
              password: "${adminPassword}"
          body:
            external_usergroup:
              auth_source_id: 4
              name: "${NewgroupName}"
          ignoreErrors: false
          connectTimeout: 30000
          readTimeout: 60000
          verifySsl: false
        out: createExternalUsergroupResponse
      
      - log: "External usergroup mapping created successfully: ${createExternalUsergroupResponse}"

      # Add your delete logic here
      - task: http
        in:
         method: DELETE
         auth:
          basic:
            username: "${adminUser}"
            password: "${adminPassword}"
         url: ${url}/api/usergroups/${groupId}
         ignoreSslErrors: true
        out: deleteRsp
      - log: "Delete response: ${deleteRsp.statusCode}"
    else:
      - log: "Cannot delete group - group not found"
