configuration:
  dependencies:
  - "mvn://org.python:jython-standalone:2.7.4"
  - "mvn://org.codehaus.groovy:groovy-all:pom:2.5.23"
  runtime: "concord-v2"
  arguments:
    foreman:
      test:
        url: "https://foreman-test.wal-mart.com"
        token: "hPk8lqNlkLaUYqWvFxzFnQ"
      cftest:
        url: "foreman-cftest.wal-mart.com"
        token: "EXL3rH6oefyNhWZtnaMSvQ"
      ho:
        url: "https://foreman-ho.wal-mart.com"
        token: "lo-g-rXXnp0zLeRiaV1ggQ"

forms:
  selectForeman:
    - selectedSystem:
        label: "Select Foreman Environment"
        type: "string"
        inputType: select
        allow:
          - foreman-test
          - foreman-cftest
          - foreman-ho
          - foreman-cloud
          - foreman-store1
          - foreman-store2
          - foreman-store3
          - foreman-store4
          - foreman-store5
          - foreman-store6
flows:
  default:
  - form: selectForeman
    yield: true
  - script: groovy
    body: |
      println "DEBUG - All execution vars:"
      excution.variables().keySet().each { key ->
        println "VAR: ${key} = ${execution.variables().get(key)}"
      }
  - script: groovy
    body: |
      def foremanData = [
        "foreman-test": ["url": "https://foreman-test.wal-mart.com", "token": "hPk8lqNlkLaUYqWvFxzFnQ"],
        "foreman-cftest": ["url": "https://foreman-cftest.wal-mart.com", "token": "EXL3rH6oefyNhWZtnaMSvQ"],
        "foreman-ho": ["url": "https://foreman-ho.wal-mart.com", "token": "lo-g-rXXnp0zLeRiaV1ggQ"],
        "foreman-cloud": ["url": "https://foreman-cloud.wal-mart.com", "token": "M0zTwxG0SGTepGVyhQQmsg"],
        "foreman-store1": ["url": "https://foreman-store1.wal-mart.com/", "token": "CiHr2meKdRZh3rMHhBU68g"],
        "foreman-store2": ["url": "https://foreman-store2.wal-mart.com/", "token": "SkVDLrvHumOT_JjOQdxz4Q"],
        "foreman-store3": ["url": "https://foreman-store3.wal-mart.com", "token": "J2wbXzltz2uJKOiCQ5Hhiw"],
        "foreman-store4": ["url": "https://foreman-store4.wal-mart.com/", "token": "iXwZl-6T1-O6RqfjWtxCbA"],
        "foreman-store5": ["url": "https://foreman-store5.wal-mart.com/", "token": "0wnNtvcI3S453r-22eLfDg"],
        "foreman-store6": ["url": "https://foreman-store6.wal-mart.com/", "token": "Not able to login"]
      ]

      def puppetData = [
        "puppet-test": ["url": "https://pe-console-test.wal-mart.com/", "token": "0FgfiGyzE4fCEUT9ieqVhjgdpMZwrJ-OSJjZujSP6QiU", "apiUrl": "https://tstr500643.wal-mart.com:4433"],
        "puppet-prod": ["url": "https://pe-console.wal-mart.com/", "token": "0a2jhCgGlFv2ESepYQUGZK0bOEQFo4Abd_ffgJKp_OOo", "apiUrl": "https://oser501241.wal-mart.com:4433"]
      ]
      println "Execution variables: " + execution.variables()

      def selected = execution.variables().get("selectedSystem")

      if (foremanData.containsKey(selected)) {
        def item = foremanData[selected]
        execution.setVariable("systemType", "Foreman")
        execution.setVariable("selectedUrl", item["url"])
        execution.setVariable("selectedToken", item["token"])
      } else if (puppetData.containsKey(selected)) {
        def item = puppetData[selected]
        execution.setVariable("systemType", "Puppet")
        execution.setVariable("selectedUrl", item["url"])
        execution.setVariable("selectedToken", item["token"])
        execution.setVariable("apiUrl", item["apiUrl"])
      } else {
        throw new RuntimeException("Unknown system selected: " + selected)
      }

  - log: "Selected URL: ${selectedUrl}"
  - set:
      date: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
      groupName: "marketing"
      NewgroupName: "marketingops"
      url: "https://192.168.56.10"
      adminUser: "admin"
      adminPassword: "-NAHCyL6QRqgYrGc-Wdfsg"

  - task: http
    in:
     method: GET
     auth:
      basic:
        username: "${adminUser}"
        password: "${adminPassword}"
     url: ${url}/api/usergroups
     response: "json"
     ignoreSslErrors: true
    out: rsp
     
  - script: python
    body: |
      import json
      response_data = rsp['content']
      group_id = None
      for group in response_data.get('results', []):
          if group.get('name') == groupName:
              group_id = group.get('id')
              break
      if group_id is None:
          print("Group '{}' not found".format(groupName))
          result.set('groupId', "")  # Set empty string instead of None
          result.set('foundGroup', False)
      else:
          print("Found group '{}' with ID: {}".format(groupName, group_id))
          result.set('groupId', str(group_id))  # Convert to string
          result.set('foundGroup', True)
    out:
      groupId: "${result.groupId}"
      foundGroup: "${result.foundGroup}"


  - if: ${foundGroup}
    then:
      - log: "Group ID found: ${groupId}"
      # Step 3: Get users in the original group
      - task: http
        in:
          url: "${url}/api/usergroups"
          method: "POST"
          request: json
          response: json
          headers:
            Content-Type: "application/json"
          auth:
            basic:
              username: "${adminUser}"
              password: "${adminPassword}"
          body:
            usergroup:
              name: "${NewgroupName}"
              admin: true
          ignoreErrors: false
          connectTimeout: 30000
          readTimeout: 60000
          verifySsl: false
        out: createUsergroupResponse
      
      - log: "Usergroup created successfully: ${createUsergroupResponse.content.id}"
      
      # Create external usergroup mapping
      - task: http
        in:
          url: "${url}/api/usergroups/${createUsergroupResponse.content.id}/external_usergroups"
          method: "POST"
          request: json
          response: json
          headers:
            Content-Type: "application/json"
          auth:
            basic:
              username: "${adminUser}"
              password: "${adminPassword}"
          body:
            external_usergroup:
              auth_source_id: 4
              name: "${NewgroupName}"
          ignoreErrors: false
          connectTimeout: 30000
          readTimeout: 60000
          verifySsl: false
        out: createExternalUsergroupResponse
      
      - log: "External usergroup mapping created successfully: ${createExternalUsergroupResponse}"

      # Add your delete logic here
      - task: http
        in:
         method: DELETE
         auth:
          basic:
            username: "${adminUser}"
            password: "${adminPassword}"
         url: ${url}/api/usergroups/${groupId}
         ignoreSslErrors: true
        out: deleteRsp
      - log: "Delete response: ${deleteRsp.statusCode}"
    else:
      - log: "Cannot delete group - group not found"

