configuration:
  dependencies:
  - "mvn://org.python:jython-standalone:2.7.4"
  runtime: "concord-v2"

flows:
  default:
  - set:
      date: "${datetime.format(datetime.current(), 'dd_MM_yyyy')}"
      groupName: "test"
      NewgroupName: "test1"
      url: "https://192.168.56.10"
  - task: http
    in:
     method: GET
     auth:
      basic:
        username: "admin"
        password: "uYLyx45Ao7P26K5kYOr4HA"
     url: ${url}/api/usergroups
     response: "json"
     ignoreSslErrors: true
    out: rsp
     
  - script: python
    body: |
      import json
      response_data = rsp['content']
      group_id = None
      for group in response_data.get('results', []):
          if group.get('name') == groupName:
              group_id = group.get('id')
              break
      if group_id is None:
          print("Group '{}' not found".format(groupName))
          result.set('groupId', "")  # Set empty string instead of None
          result.set('foundGroup', False)
      else:
          print("Found group '{}' with ID: {}".format(groupName, group_id))
          result.set('groupId', str(group_id))  # Convert to string
          result.set('foundGroup', True)
    out:
      groupId: "${result.groupId}"
      foundGroup: "${result.foundGroup}"


  - if: ${foundGroup}
    then:
      - log: "Group ID found: ${groupId}"
      # Step 3: Get users in the original group
      - task: http
        in:
         method: GET
         auth:
          basic:
            username: "admin"
            password: "uYLyx45Ao7P26K5kYOr4HA"
         url: ${url}/api/usergroups/${groupId}/users
         response: "json"
         ignoreSslErrors: true
        out: usersRsp
      - log: "Users in group response: ${usersRsp.content.results}"

      - script: python
        body: |
          import json
          users_data = usersRsp.get('content', {})
          users_list = users_data.get('results', [])
          #logins = [user['id'] for user in users_list if user.get('login')]
          user_objects = [{"id": user['id']} for user in users_list if user.get('login')]
          user_objects_json = json.dumps(user_objects)
          result.set("user_objects", user_objects_json)
        out:
          user_ids: "${result.user_objects}"
      - log: "${user_ids}"

      # Step 4: Create new group
      - task: http
        in:
         method: POST
         auth:
          basic:
            username: "admin"
            password: "uYLyx45Ao7P26K5kYOr4HA"
         url: ${url}/api/usergroups
         headers:
           Content-Type: "application/json"
         body: '{"name": "${NewgroupName}", "description": "Backup group created before deleting ${groupName} on ${date}"}'
         request: json
         response: json
         ignoreSslErrors: true
        out: createRsp
      
      - log: "Create new group response: ${createRsp}"
      - set:
          newGroupId: ${createRsp.content.id}

      - log: "${body}"
      - task: http
        in:
          url: "https://192.168.56.10/api/usergroups/${newGroupId}"
          method: PATCH
          headers:
            Content-Type: "application/json"
          auth:
            basic:
              username: "admin"
              password: "uYLyx45Ao7P26K5kYOr4HA"
          ignoreErrors: false
          request: json
          response: json
          body: '{"id": "${newGroupId}" ,"name": "${NewgroupName}","admin": false,"users": ${user_ids},"roles": [],"usergroups": []}'
        out: response
 
      # Add your delete logic here
      - task: http
        in:
         method: DELETE
         auth:
          basic:
            username: "admin"
            password: "uYLyx45Ao7P26K5kYOr4HA"
         url: ${url}/api/usergroups/${groupId}
         ignoreSslErrors: true
        out: deleteRsp
      - log: "Delete response: ${deleteRsp.statusCode}"
    else:
      - log: "Cannot delete group - group not found"
